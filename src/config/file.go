// Code generated by go-bindata.
// sources:
// src/config/file/config.yaml
// DO NOT EDIT!

package config

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _srcConfigFileConfigYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x50\xd1\x8e\xea\x20\x14\x7c\x27\xe1\x1f\x4e\xe2\xeb\x0d\x2d\x6a\xb4\x9e\x9f\xb9\xa1\x72\x5c\xbb\xa1\xc0\x02\x96\xb0\x5f\xbf\xa1\xad\x56\xdf\x3a\xd3\x99\x33\x33\x28\xef\x91\x33\x00\xab\x46\x42\x48\x77\x17\x2a\xba\xbb\x98\x10\xe4\xfe\x2c\x5a\xd1\x0a\xf9\x4f\x5e\xf6\x42\x9e\xba\xfa\xcd\xd9\xd5\x8d\xa3\xb3\xb3\x8b\xec\x84\xa0\x69\xe2\xcc\xb8\xaf\x99\xb9\x0d\x86\xbc\x4a\x77\x04\x8d\x4d\xa2\x98\x2a\x69\x68\x22\x83\x30\xd8\x9b\xe3\x2c\x52\x98\x28\xcc\x62\xef\x42\x42\xe8\xba\xae\xab\x28\xc7\xc5\xd8\xe4\x58\xa1\xf2\xc3\x8a\x95\x1f\x2a\x91\xae\x4b\xd5\x37\xdf\x85\x33\xdd\x23\x67\x3b\x80\x47\x30\x08\xdf\xba\xbf\x62\xd3\xbc\x8a\xe3\xe1\xd0\x9e\xd6\x1a\xbb\xd7\xac\x75\x8c\x3c\x1c\x85\xdc\x5f\xde\xf6\x1e\x85\x3c\x0b\xd9\x76\xa2\x1e\xde\x3d\x73\xea\x8d\xad\xed\xb1\x6d\xe5\xfc\x53\xf7\x9f\x6f\xf6\xc4\xa5\x64\xea\xff\x5b\xca\x4b\xad\x48\xe1\x53\xb7\x31\xa5\x8c\xbf\x4b\x8e\x8a\x31\xbb\xa0\x37\xd1\xc6\xe8\x87\xcb\xca\x2e\x01\xa9\x78\x42\x18\x4b\xfc\x31\x9c\x71\xf6\x17\x00\x00\xff\xff\x86\x1d\xc1\x03\xbc\x01\x00\x00")

func srcConfigFileConfigYamlBytes() ([]byte, error) {
	return bindataRead(
		_srcConfigFileConfigYaml,
		"src/config/file/config.yaml",
	)
}

func srcConfigFileConfigYaml() (*asset, error) {
	bytes, err := srcConfigFileConfigYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "src/config/file/config.yaml", size: 444, mode: os.FileMode(438), modTime: time.Unix(1558331453, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"src/config/file/config.yaml": srcConfigFileConfigYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"src": &bintree{nil, map[string]*bintree{
		"config": &bintree{nil, map[string]*bintree{
			"file": &bintree{nil, map[string]*bintree{
				"config.yaml": &bintree{srcConfigFileConfigYaml, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

