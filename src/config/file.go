// Code generated by go-bindata.
// sources:
// src/config/file/config.yaml
// DO NOT EDIT!

package config

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _srcConfigFileConfigYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x90\xdd\x8e\x83\x20\x14\x84\xef\x49\x78\x87\x93\xf4\x76\x83\x60\x9b\xfe\xf0\x32\x1b\x2c\x67\xab\x1b\x14\x16\x50\xc2\x3e\xfd\x06\x71\x6b\x7b\xe7\x4c\xe6\x38\xdf\xa0\x9c\x93\x94\x00\x4c\x6a\x44\x09\xb1\xb7\xbe\xa8\xde\x86\x28\x41\xb4\x17\xc6\x19\x67\xe2\x43\xdc\x5a\x26\xce\xd7\xf2\x4d\xc9\xdd\x8e\xa3\x9d\xd6\x2b\x9c\x16\x09\x1a\x17\x4a\x8c\x7d\xac\xce\xd7\x60\xd0\xa9\xd8\x4b\xd0\xb2\x89\x18\x62\x31\x0d\x2e\x68\x4a\xb0\x9b\x1f\x94\x04\xf4\x0b\xfa\x35\xed\xac\x2f\x3d\x9c\x73\x51\x64\x0a\xf5\xb4\x49\xa1\x48\xe5\x86\x4d\x2b\x37\x14\x23\xde\x2b\xec\xeb\x61\x4b\x89\xee\x24\x25\x07\x80\xd9\x1b\x09\xdf\xba\xbb\xcb\xa6\x79\xb2\xcb\xe3\x91\x9f\x37\x92\xc3\x73\xd9\xb6\x47\x1c\x4f\x4c\xb4\xb7\x97\xc9\x27\x26\x2e\x4c\xf0\x2b\xbb\xde\xd6\x7c\x2d\x2a\xff\xd8\x79\x4f\x2b\xee\x01\x40\x77\xef\xcf\xf6\xaf\x73\x4e\xd8\x7d\x4e\x98\x2a\x56\x40\xff\x9e\xdb\x9d\x9c\xc7\xdf\xda\xa3\x42\x48\xd6\xeb\x3d\xb4\x3b\x7a\xb6\x49\x4d\xb5\x20\x66\x87\x12\xc6\x1c\x7e\x0c\x25\x94\xfc\x05\x00\x00\xff\xff\x8b\xfd\xd4\x9a\xbf\x01\x00\x00")

func srcConfigFileConfigYamlBytes() ([]byte, error) {
	return bindataRead(
		_srcConfigFileConfigYaml,
		"src/config/file/config.yaml",
	)
}

func srcConfigFileConfigYaml() (*asset, error) {
	bytes, err := srcConfigFileConfigYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "src/config/file/config.yaml", size: 447, mode: os.FileMode(438), modTime: time.Unix(1559296149, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"src/config/file/config.yaml": srcConfigFileConfigYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"src": &bintree{nil, map[string]*bintree{
		"config": &bintree{nil, map[string]*bintree{
			"file": &bintree{nil, map[string]*bintree{
				"config.yaml": &bintree{srcConfigFileConfigYaml, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

