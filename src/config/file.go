// Code generated by go-bindata.
// sources:
// src/config/file/config.yaml
// DO NOT EDIT!

package config

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _srcConfigFileConfigYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x50\x51\x8e\x9b\x30\x14\xfc\x47\xe2\x0e\x4f\xda\xdf\xca\xd8\xe0\x05\xe7\xdd\xa0\xea\x67\x0f\x50\x19\xfc\x48\xd2\x02\x76\x6d\x27\xc8\x3d\x7d\x65\x9c\x4d\x76\xff\x98\x61\xc6\x33\xf3\xb4\x73\x58\x57\x00\x9b\x5e\x09\x21\x5e\xac\xcf\xe8\x62\x43\x44\x10\xed\xc0\x38\xe3\x4c\x7c\x13\xa7\x96\x89\x5e\xe5\xef\xba\x9a\xec\xba\xda\xed\x70\xd1\x76\x47\x30\x74\xaf\xab\xc5\x9e\x0f\x66\xbe\x2e\xe4\x74\xbc\x20\x18\x6c\x9a\xfc\x1e\x5b\xec\x39\xff\x59\xe8\x4e\x4b\x56\x8f\xb7\x73\x5d\x05\xf2\x77\xf2\x87\xc5\x59\x9f\xc3\x38\xe7\x22\xc3\x3d\x14\x7f\xb3\x87\x0c\xb5\xbb\x3e\xb0\x76\xd7\x4c\xc4\xa9\x34\xfe\x6c\x6c\xeb\xca\x8c\x58\x57\x6f\x00\x37\xbf\x20\xfc\x36\xe3\x84\x4d\xf3\x1c\x80\x5d\xc7\xfb\x26\x52\x88\x87\xe6\x31\xef\x31\x4a\x74\x92\x89\xf6\xf4\x69\xb7\x64\x62\x60\x82\x2b\xa6\x4e\x87\xbe\x04\xe5\x37\x5e\x7d\xe5\x51\xf7\x0d\xc0\x8c\x5f\x6f\xf7\x81\x53\xda\x69\xfc\xb5\xd1\x5e\x6a\x05\xf2\x5f\x75\x2f\x26\xa5\xf5\x5f\xc9\xd1\x21\xec\xd6\x9b\x97\xe8\xc5\x98\x9b\xdd\xf5\x56\x02\x62\x72\x84\xb0\xa6\xf0\x77\xa9\xab\x3d\x60\xb9\xd3\xc7\x59\xb4\x73\xdf\x0d\x82\xdd\x28\xea\xe5\xcf\x93\xfb\x41\x09\x61\xd4\xb2\xeb\x94\x31\x24\x8c\x91\x3d\x17\x5a\x49\x35\xb7\xda\x10\xd1\xf8\x2e\xf8\xf4\x54\xff\xa4\xc9\x53\x44\x98\xe7\x49\x76\xa2\x15\xbd\x9c\x89\x77\x4a\x0d\x83\x36\x72\xe8\x49\xbe\x77\xe3\x3c\x48\x3a\xf5\xba\x35\xa4\xa8\x18\x27\x9f\x5c\xb4\x08\xe1\xa2\x45\x5d\xfd\x0f\x00\x00\xff\xff\x22\xd2\x0b\xee\x5c\x02\x00\x00")

func srcConfigFileConfigYamlBytes() ([]byte, error) {
	return bindataRead(
		_srcConfigFileConfigYaml,
		"src/config/file/config.yaml",
	)
}

func srcConfigFileConfigYaml() (*asset, error) {
	bytes, err := srcConfigFileConfigYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "src/config/file/config.yaml", size: 604, mode: os.FileMode(438), modTime: time.Unix(1561448291, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"src/config/file/config.yaml": srcConfigFileConfigYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"src": &bintree{nil, map[string]*bintree{
		"config": &bintree{nil, map[string]*bintree{
			"file": &bintree{nil, map[string]*bintree{
				"config.yaml": &bintree{srcConfigFileConfigYaml, map[string]*bintree{}},
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

